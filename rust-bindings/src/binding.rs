/* automatically generated by rust-bindgen 0.59.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const SpaStatus_SpaStatus_Success: SpaStatus = 0;
pub const SpaStatus_SpaStatus_UnsupportedDate: SpaStatus = 1;
pub const SpaStatus_SpaStatus_InvalidPressure: SpaStatus = 12;
pub const SpaStatus_SpaStatus_InvalidTemperature: SpaStatus = 13;
pub const SpaStatus_SpaStatus_InvalidDeltaUt1: SpaStatus = 17;
pub const SpaStatus_SpaStatus_InvalidDeltaT: SpaStatus = 7;
pub const SpaStatus_SpaStatus_InvalidLongitude: SpaStatus = 9;
pub const SpaStatus_SpaStatus_InvalidLatitude: SpaStatus = 10;
pub const SpaStatus_SpaStatus_InvalidAtmosRefract: SpaStatus = 16;
pub const SpaStatus_SpaStatus_InvalidElevation: SpaStatus = 11;
pub type SpaStatus = cty::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spa_data {
    pub jd: f64,
    pub delta_ut1: f64,
    pub delta_t: f64,
    pub longitude: f64,
    pub latitude: f64,
    pub elevation: f64,
    pub pressure: f64,
    pub temperature: f64,
    pub atmos_refract: f64,
    pub jc: f64,
    pub jde: f64,
    pub jce: f64,
    pub jme: f64,
    pub l: f64,
    pub b: f64,
    pub r: f64,
    pub theta: f64,
    pub beta: f64,
    pub x0: f64,
    pub x1: f64,
    pub x2: f64,
    pub x3: f64,
    pub x4: f64,
    pub del_psi: f64,
    pub del_epsilon: f64,
    pub epsilon0: f64,
    pub epsilon: f64,
    pub del_tau: f64,
    pub lamda: f64,
    pub nu0: f64,
    pub nu: f64,
    pub alpha: f64,
    pub delta: f64,
    pub h: f64,
    pub xi: f64,
    pub del_alpha: f64,
    pub delta_prime: f64,
    pub h_prime: f64,
    pub e0: f64,
    pub del_e: f64,
    pub e: f64,
}
#[test]
fn bindgen_test_layout_spa_data() {
    assert_eq!(
        ::std::mem::size_of::<spa_data>(),
        328usize,
        concat!("Size of: ", stringify!(spa_data))
    );
    assert_eq!(
        ::std::mem::align_of::<spa_data>(),
        8usize,
        concat!("Alignment of ", stringify!(spa_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).jd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(jd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).delta_ut1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(delta_ut1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).delta_t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(delta_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).longitude as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).latitude as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).elevation as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).pressure as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).temperature as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).atmos_refract as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(atmos_refract)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).jc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(jc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).jde as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(jde)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).jce as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(jce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).jme as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(jme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).l as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).b as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).r as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).theta as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(theta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).beta as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(beta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).x0 as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).x1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).x2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).x3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(x3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).x4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(x4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).del_psi as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(del_psi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).del_epsilon as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(del_epsilon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).epsilon0 as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(epsilon0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).epsilon as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(epsilon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).del_tau as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(del_tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).lamda as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(lamda)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).nu0 as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(nu0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).nu as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(nu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).alpha as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).delta as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).h as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).xi as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(xi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).del_alpha as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(del_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).delta_prime as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(delta_prime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).h_prime as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(h_prime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).e0 as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(e0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).del_e as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(del_e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spa_data>())).e as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(spa_data),
            "::",
            stringify!(e)
        )
    );
}
extern "C" {
    pub fn spa_calculate(spa: *mut spa_data) -> SpaStatus;
}
pub type va_list = *mut cty::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut cty::c_char, ...);
}
pub type size_t = cty::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = cty::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = cty::c_schar;
pub type int_least16_t = cty::c_short;
pub type int_least32_t = cty::c_int;
pub type int_least64_t = cty::c_longlong;
pub type uint_least8_t = cty::c_uchar;
pub type uint_least16_t = cty::c_ushort;
pub type uint_least32_t = cty::c_uint;
pub type uint_least64_t = cty::c_ulonglong;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_int;
pub type int_fast32_t = cty::c_int;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_uint;
pub type uint_fast32_t = cty::c_uint;
pub type uint_fast64_t = cty::c_ulonglong;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
pub type unix_t = i64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ssc_input {
    pub time: unix_t,
    pub latitude: f64,
    pub longitude: f64,
    pub delta_ut1: f64,
    pub delta_t: f64,
    pub elevation: f64,
    pub pressure: f64,
    pub temperature: f64,
    pub atmos_refract: f64,
    pub step_size: u32,
}
#[test]
fn bindgen_test_layout_ssc_input() {
    assert_eq!(
        ::std::mem::size_of::<ssc_input>(),
        80usize,
        concat!("Size of: ", stringify!(ssc_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ssc_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ssc_input))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).latitude as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).longitude as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).delta_ut1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(delta_ut1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).delta_t as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(delta_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).elevation as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).pressure as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).temperature as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).atmos_refract as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(atmos_refract)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_input>())).step_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_input),
            "::",
            stringify!(step_size)
        )
    );
}
extern "C" {
    pub fn ssc_input_defaults(input: *mut ssc_input, time: unix_t, latitude: f64, longitude: f64);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ssc_result {
    pub set: unix_t,
    pub rise: unix_t,
    pub visible: bool,
}
#[test]
fn bindgen_test_layout_ssc_result() {
    assert_eq!(
        ::std::mem::size_of::<ssc_result>(),
        24usize,
        concat!("Size of: ", stringify!(ssc_result))
    );
    assert_eq!(
        ::std::mem::align_of::<ssc_result>(),
        8usize,
        concat!("Alignment of ", stringify!(ssc_result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_result>())).set as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_result),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_result>())).rise as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_result),
            "::",
            stringify!(rise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssc_result>())).visible as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ssc_result),
            "::",
            stringify!(visible)
        )
    );
}
extern "C" {
    pub fn ssc(input: *const ssc_input, result: *mut ssc_result) -> SpaStatus;
}
