/* automatically generated by rust-bindgen 0.60.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const SpaStatus_SpaStatus_Success: SpaStatus = 0;
pub const SpaStatus_SpaStatus_UnsupportedDate: SpaStatus = 1;
pub const SpaStatus_SpaStatus_InvalidPressure: SpaStatus = 12;
pub const SpaStatus_SpaStatus_InvalidTemperature: SpaStatus = 13;
pub const SpaStatus_SpaStatus_InvalidDeltaUt1: SpaStatus = 17;
pub const SpaStatus_SpaStatus_InvalidDeltaT: SpaStatus = 7;
pub const SpaStatus_SpaStatus_InvalidLongitude: SpaStatus = 9;
pub const SpaStatus_SpaStatus_InvalidLatitude: SpaStatus = 10;
pub const SpaStatus_SpaStatus_InvalidAtmosRefract: SpaStatus = 16;
pub const SpaStatus_SpaStatus_InvalidElevation: SpaStatus = 11;
pub type SpaStatus = cty::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spa_data {
    pub jd: f64,
    pub delta_ut1: f64,
    pub delta_t: f64,
    pub longitude: f64,
    pub latitude: f64,
    pub elevation: f64,
    pub pressure: f64,
    pub temperature: f64,
    pub atmos_refract: f64,
    pub jc: f64,
    pub jde: f64,
    pub jce: f64,
    pub jme: f64,
    pub l: f64,
    pub b: f64,
    pub r: f64,
    pub theta: f64,
    pub beta: f64,
    pub x0: f64,
    pub x1: f64,
    pub x2: f64,
    pub x3: f64,
    pub x4: f64,
    pub del_psi: f64,
    pub del_epsilon: f64,
    pub epsilon0: f64,
    pub epsilon: f64,
    pub del_tau: f64,
    pub lamda: f64,
    pub nu0: f64,
    pub nu: f64,
    pub alpha: f64,
    pub delta: f64,
    pub h: f64,
    pub xi: f64,
    pub del_alpha: f64,
    pub delta_prime: f64,
    pub h_prime: f64,
    pub e0: f64,
    pub del_e: f64,
    pub e: f64,
}
#[test]
fn bindgen_test_layout_spa_data() {
    assert_eq!(
        ::std::mem::size_of::<spa_data>(),
        328usize,
        concat!("Size of: ", stringify!(spa_data))
    );
    assert_eq!(
        ::std::mem::align_of::<spa_data>(),
        8usize,
        concat!("Alignment of ", stringify!(spa_data))
    );
    fn test_field_jd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(jd)
            )
        );
    }
    test_field_jd();
    fn test_field_delta_ut1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delta_ut1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(delta_ut1)
            )
        );
    }
    test_field_delta_ut1();
    fn test_field_delta_t() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delta_t) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(delta_t)
            )
        );
    }
    test_field_delta_t();
    fn test_field_longitude() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(longitude)
            )
        );
    }
    test_field_longitude();
    fn test_field_latitude() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(latitude)
            )
        );
    }
    test_field_latitude();
    fn test_field_elevation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(elevation)
            )
        );
    }
    test_field_elevation();
    fn test_field_pressure() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(pressure)
            )
        );
    }
    test_field_pressure();
    fn test_field_temperature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(temperature)
            )
        );
    }
    test_field_temperature();
    fn test_field_atmos_refract() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).atmos_refract) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(atmos_refract)
            )
        );
    }
    test_field_atmos_refract();
    fn test_field_jc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jc) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(jc)
            )
        );
    }
    test_field_jc();
    fn test_field_jde() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jde) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(jde)
            )
        );
    }
    test_field_jde();
    fn test_field_jce() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jce) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(jce)
            )
        );
    }
    test_field_jce();
    fn test_field_jme() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jme) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(jme)
            )
        );
    }
    test_field_jme();
    fn test_field_l() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).l) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(l)
            )
        );
    }
    test_field_l();
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(b)
            )
        );
    }
    test_field_b();
    fn test_field_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(r)
            )
        );
    }
    test_field_r();
    fn test_field_theta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).theta) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(theta)
            )
        );
    }
    test_field_theta();
    fn test_field_beta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).beta) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(beta)
            )
        );
    }
    test_field_beta();
    fn test_field_x0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x0) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(x0)
            )
        );
    }
    test_field_x0();
    fn test_field_x1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(x1)
            )
        );
    }
    test_field_x1();
    fn test_field_x2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(x2)
            )
        );
    }
    test_field_x2();
    fn test_field_x3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x3) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(x3)
            )
        );
    }
    test_field_x3();
    fn test_field_x4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x4) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(x4)
            )
        );
    }
    test_field_x4();
    fn test_field_del_psi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).del_psi) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(del_psi)
            )
        );
    }
    test_field_del_psi();
    fn test_field_del_epsilon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).del_epsilon) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(del_epsilon)
            )
        );
    }
    test_field_del_epsilon();
    fn test_field_epsilon0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).epsilon0) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(epsilon0)
            )
        );
    }
    test_field_epsilon0();
    fn test_field_epsilon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).epsilon) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(epsilon)
            )
        );
    }
    test_field_epsilon();
    fn test_field_del_tau() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).del_tau) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(del_tau)
            )
        );
    }
    test_field_del_tau();
    fn test_field_lamda() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lamda) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(lamda)
            )
        );
    }
    test_field_lamda();
    fn test_field_nu0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nu0) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(nu0)
            )
        );
    }
    test_field_nu0();
    fn test_field_nu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nu) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(nu)
            )
        );
    }
    test_field_nu();
    fn test_field_alpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(alpha)
            )
        );
    }
    test_field_alpha();
    fn test_field_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(delta)
            )
        );
    }
    test_field_delta();
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field_xi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xi) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(xi)
            )
        );
    }
    test_field_xi();
    fn test_field_del_alpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).del_alpha) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(del_alpha)
            )
        );
    }
    test_field_del_alpha();
    fn test_field_delta_prime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delta_prime) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(delta_prime)
            )
        );
    }
    test_field_delta_prime();
    fn test_field_h_prime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h_prime) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(h_prime)
            )
        );
    }
    test_field_h_prime();
    fn test_field_e0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e0) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(e0)
            )
        );
    }
    test_field_e0();
    fn test_field_del_e() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).del_e) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(del_e)
            )
        );
    }
    test_field_del_e();
    fn test_field_e() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<spa_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(spa_data),
                "::",
                stringify!(e)
            )
        );
    }
    test_field_e();
}
extern "C" {
    pub fn spa_calculate(spa: *mut spa_data) -> SpaStatus;
}
pub type va_list = *mut cty::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut cty::c_char, ...);
}
pub type size_t = cty::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = cty::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = cty::c_schar;
pub type int_least16_t = cty::c_short;
pub type int_least32_t = cty::c_int;
pub type int_least64_t = cty::c_longlong;
pub type uint_least8_t = cty::c_uchar;
pub type uint_least16_t = cty::c_ushort;
pub type uint_least32_t = cty::c_uint;
pub type uint_least64_t = cty::c_ulonglong;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_int;
pub type int_fast32_t = cty::c_int;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_uint;
pub type uint_fast32_t = cty::c_uint;
pub type uint_fast64_t = cty::c_ulonglong;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
pub type unix_t = i64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ssc_input {
    pub time: unix_t,
    pub latitude: f64,
    pub longitude: f64,
    pub delta_ut1: f64,
    pub delta_t: f64,
    pub elevation: f64,
    pub pressure: f64,
    pub temperature: f64,
    pub atmos_refract: f64,
    pub step_size: u32,
}
#[test]
fn bindgen_test_layout_ssc_input() {
    assert_eq!(
        ::std::mem::size_of::<ssc_input>(),
        80usize,
        concat!("Size of: ", stringify!(ssc_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ssc_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ssc_input))
    );
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_latitude() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(latitude)
            )
        );
    }
    test_field_latitude();
    fn test_field_longitude() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(longitude)
            )
        );
    }
    test_field_longitude();
    fn test_field_delta_ut1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delta_ut1) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(delta_ut1)
            )
        );
    }
    test_field_delta_ut1();
    fn test_field_delta_t() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delta_t) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(delta_t)
            )
        );
    }
    test_field_delta_t();
    fn test_field_elevation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(elevation)
            )
        );
    }
    test_field_elevation();
    fn test_field_pressure() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(pressure)
            )
        );
    }
    test_field_pressure();
    fn test_field_temperature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(temperature)
            )
        );
    }
    test_field_temperature();
    fn test_field_atmos_refract() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).atmos_refract) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(atmos_refract)
            )
        );
    }
    test_field_atmos_refract();
    fn test_field_step_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).step_size) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_input),
                "::",
                stringify!(step_size)
            )
        );
    }
    test_field_step_size();
}
extern "C" {
    pub fn ssc_input_defaults(input: *mut ssc_input, time: unix_t, latitude: f64, longitude: f64);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ssc_result {
    pub set: unix_t,
    pub rise: unix_t,
    pub visible: bool,
}
#[test]
fn bindgen_test_layout_ssc_result() {
    assert_eq!(
        ::std::mem::size_of::<ssc_result>(),
        24usize,
        concat!("Size of: ", stringify!(ssc_result))
    );
    assert_eq!(
        ::std::mem::align_of::<ssc_result>(),
        8usize,
        concat!("Alignment of ", stringify!(ssc_result))
    );
    fn test_field_set() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_result>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_result),
                "::",
                stringify!(set)
            )
        );
    }
    test_field_set();
    fn test_field_rise() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_result>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rise) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_result),
                "::",
                stringify!(rise)
            )
        );
    }
    test_field_rise();
    fn test_field_visible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ssc_result>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).visible) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ssc_result),
                "::",
                stringify!(visible)
            )
        );
    }
    test_field_visible();
}
extern "C" {
    pub fn ssc(input: *const ssc_input, result: *mut ssc_result) -> SpaStatus;
}
